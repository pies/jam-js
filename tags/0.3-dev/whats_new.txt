JAM: A Javascript library that aims to impress.
(C)2006 Michal Tatarynowicz <tatarynowicz@gmail.com>
Please see licence.txt for details.

0.3-dev (2006/07/25)

  Still below 20kB packed :)

  + JAM.provides() and JAM.requires() for a Dojo-like, auto-loading package 
    management system

  ~ A re-write of JAM.Lang.Class.extend()

  - Removed JAM.Lang.Func.bindEvent() -- I didn't know what it's actually for

  ~ re-factored JAM.Browser a little bit

  - Added the missing JAM.Lang.Array.max (there were two "min()"'s though)

  - Fixed JAM.Lang.Array.compact()

  ~ Moved all the onReady code into a separate class (and file, ready.js)

  + Added mouse position tracking to 0.2's mouse buttons tracking, so now you 
    can read the mouse position and button states from anywhere in the 
    application, not just from mouse event handlers.

  - Fixed JAM.Lang.Events.disconnectAll()

  - Debugging code doesn't break Firefox if you haven't got Firebug installed 
    (but why would you ;)

  + JAM.Dom.Element.putInto() puts the element into another (reversing 
    element.appendChild); perhaps it should be called appendTo()

  + JAM.Dom.Element.makeDraggable() and JAM.Dom.Element.makeResizable()

  + JAM.onReady now should work in Safari -- code stolen from jQuery, 
    thanks John :)

  + JAM.Dom.Element.getArea() returns an JAM.Shape object that contains both 
    element's size and position. 
  
  + JAM.Shape.contains() can check if an element is (visually) inside another
    element.

  - Removed the IE5.0 compatibility code -- no point in doing it if I'm 
    not going to test it or use it.



0.2-dev (2006/06/03)

  Packed filesize still below 20kB and there's room for improvements and 
  deletions. That was a busy two weeks, I'll tell you that.

  + Number.prototype.round()
    | var three = (10/3).round();

  + Number.prototype.abs()
    | var two = (-2).abs();

  + Number.prototype.or()
    | var five = (0).or(5);

  + added a set of IE 5.0 compatibility fixes by Dean Edwards, although I'm not 
    sure if it helps JAM work with IE5 in any way, to be decided if it stays or 
    goes

  + classes extended with extend() get bound() -- a shortcut for bind()
    | MyClass.bound('Foo') == MyClass.Foo.bind(MyClass);

  + JAM.Event tracks mouse button events to be able to provide correct 
    information about currently pressed mouse buttons at any point of execution, 
    available via the event.mouse.buttons array
    | var leftButtonIsPressed = event.mouse.buttons.has('L');

  + String.prototype.reverse
    | 'abc'.reverse() == 'cba';

  + Array.prototype.add() is same as Array.push(), but is chainable
    | [a,b].push(c) == true;
    | [a,b].add(c) == [a,b,c];

  + Array.prototype.only() limits contents of the array to elements present in 
    the provided array (a logical AND on two arrays)
    | [a,b,c].only([a,c,e]) == [a,c];

  + Array.prototype.not() removes elements present in the provided array (a 
    logical NOT)
    | [a,b,c].not([a,c,e]) == [b];

  + Array.prototype.empty() which empties the array and is chainable
    | my.elements.remove().empty();

  + Element.prototype.name() returns element's tagName or 'element' if tagName 
    not present
    | $('DIV').name() == 'div';

  + Element.prototype.set() called with just one, non-array parameter sets 
    element's value (if applicable) or innerHTML (otherwise)
    | $('DIV').set('Hello').innerHTML = 'Hello';
    | $('INPUT').set('Hello').value = 'Hello';

  + Element.prototype.get() called with no parameters returns the element's 
    value (if applicable) or innerHTML (otherwise)
    | $('DIV').get() == $('DIV').innerHTML;
    | $('INPUT').get() == $('INPUT').value;

  + Element.prototype.placeOver() places element centered horizontally and  
    vertically over the element provided as parameter

  + JAM.Dom.selector tries to be compatibile with Prototype's $() function. That 
    means that $('foobar') tries to find all <foobar> tags, and if it finds none 
    such, tries finding $('#foobar') automatically

  + JAM.Dom.Draggable.apply() makes an element draggable with mouse, see the 
    code for details
    | JAM.Dom.Draggable.apply(element);

  + JAM.Dom.Resizable.apply() makes an element resizable with mouse, see the 
    code for details
    | JAM.Dom.Resizable.apply(element);

  ~ Refactored the main JAM class

  ~ getStyle(), setStyle() and undoStyle() renamed to getCss(), setCss() and 
    restoreCss()

  ~ Element.prototype.position() returns element's _cumulative_ position which 
    *can break some your code*,

  ~ Element.prototype.off(N) now disconnects N last bindings (or all if no N 
    provided)

  - isObject() alias didn't get exported (fixed)

  - packed code had errors because of a few missing semicolons (fixed)

  - Element.off() didn't disconnect the event bindings (fixed)
